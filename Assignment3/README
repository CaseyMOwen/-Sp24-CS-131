Casey Owen, cowen03
CS131
Assignment 3
The Knapsack Problem

1. Define the problem as a genetic algorithm
Answer : To do this, I created a Genetic class and a Backpack class that represents a the genetic operations (mutate and crossover) as well as genomes for each individual backpack in the population, plus a fitness function. I ran the genetic searching algorithm by randomly mutating and crossing over individuals with their parents, culling the population by 50% each round, and tabulating and plotting the resulting fitness graph. The search algorithm will exit early if the best solution does not improve for a given number of steps. This is all implemented in the attached .py files. To run:

-Ensure the "random" "numpy" "matplotlib" and "copy" libraries are installed
-Run main.py

2. Provide the genome for the problem.
Answer: The genome for the problem is gives a possible state of a backpack (what boxes it contains) and therefore represents a possible solution. I represented this with an array of 1's and 0's that represent whether that box is present in the backpack. I also kept track of the available boxes to each backpack. For example, if there were four possible boxes, and I wanted a backpack that contained only the 2nd and 4th box, that genome would be [0, 1, 0, 1] 

3. Define all the fringe operations.
Answer: All possible fringe operations are single-point mutation, multi-point mutation, one-point crossover, and multi-point crossover. These are all defined in geneticsearch.py, in functions "mutate" and "crossover". The two functions are capable of mutating/crossing over a generic number of points (one or multiple), and therefore can perform all four operations. These functions are called whenever new individuals are created in the population, although mutation only occurs with a small probability.


4. Cull your population by 50% at every generation.
Answer: This is done in geneticsearch.py, in function "cull". In the search function, it is called at every iteration, aka generation.

